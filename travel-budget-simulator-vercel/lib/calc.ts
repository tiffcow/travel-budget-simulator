export type CountryConfig={country:string;months:number;multiplier:number};
export type Inputs={baselinePerPersonUSD:number;extrasPerPersonUSD:number;numPeople:number;sharedBaselineFraction:number;sharedExtrasFraction:number;monthlyIncomeUSD:number;emergencyPercent:number};
export type Outputs={byCountry:Array<{country:string;months:number;baselineUSD:number;extrasUSD:number;subtotalUSD:number}>; totals:{months:number;baselineUSD:number;extrasUSD:number;subtotalUSD:number;emergencyUSD:number;grandTotalUSD:number;monthlyAvgUSD:number;yourShareUSD:number;partnerShareUSD:number}};
export function computePlan(c:CountryConfig[], i:Inputs):Outputs{ const tm=c.reduce((s,x)=>s+x.months,0); let by:Outputs['byCountry']=[]; let bs=0, es=0; for(const x of c){ const m=x.months, f=x.multiplier; const soloB=i.baselinePerPersonUSD*f, soloE=i.extrasPerPersonUSD*f; const sharedB=soloB*i.sharedBaselineFraction, nonSharedB=soloB*(1-i.sharedBaselineFraction); const groupB=sharedB+nonSharedB*i.numPeople; const sharedE=soloE*i.sharedExtrasFraction, nonSharedE=soloE*(1-i.sharedExtrasFraction); const groupE=sharedE+nonSharedE*i.numPeople; const b=groupB*m, e=groupE*m, sub=b+e; bs+=b; es+=e; by.push({country:x.country, months:m, baselineUSD:b, extrasUSD:e, subtotalUSD:sub}) } const sub=bs+es; const em=i.emergencyPercent/100*sub; const grand=sub+em; const avg=tm?grand/tm:0; const your=grand/(i.numPeople||1); const partner=i.numPeople===2?your:0; return { byCountry:by, totals:{months:tm, baselineUSD:bs, extrasUSD:es, subtotalUSD:sub, emergencyUSD:em, grandTotalUSD:grand, monthlyAvgUSD:avg, yourShareUSD:your, partnerShareUSD:partner} } }
